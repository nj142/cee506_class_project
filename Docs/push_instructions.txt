
1 # Steps to linking your local notebook to the remote github branch

	1. Change directory using CD in your local terminal to an empty folder on your computer/docker (e.g. new folder called ESDA_project in Jupyter)

	2. Type "git clone https://github.com/nj142/cee506_class_project" to download & track the main branch of the remote repository


2 # Steps to creating a new local branch & linking it to a new corresponding remote branch
(You cannot edit or push to the main branch unless you are the merge master, so this branch is where you will upload all your changes while programming.)

	1. CD to cee506_class_project in your local commandline terminal (if you aren't already there)
 
	2. Type "git checkout -b feature/your-new-branch-name" to create a new branch on your local repository
 
	3. Type "git push origin feature/your-new-branch-name" to update the remote repo with your new branch.

	4. Login with your Git username (e.g. nj142) and copy over your personal access token as your password


3 # Steps to pushing your local code updates to the remote feature branch
(Note it is good practice to run git commit every time you finish a working function or code block-- around every 20 minutes or so.  You only really need to push to your remote branch at the end of each programming session.)

	1. Git checkout to your feature branch to make sure you don't accidentally update the main branch

	2. CD to your working directory to make sure you cover all files you updated
 
	3. To track any new files you created don't forget to type "git add ." (DO NOT DO THIS IF YOU HAVE API KEYS SAVED LOCALLY.  This will make your secrets public. Use .gitignore and/or only git add individual files.)
 
	4. To commit changes to queue for upload type "git commit -am "Changes description""
 
	5. Once you want to back up the cloud, push with "git push origin feature/my-feature" (or just git push if you already used -u)


4 # Steps to merging your remote feature branch with remote main repository once your code is finished & pushed to remote

	1. Don't push to main!  Instead, once you are ready to merge your code files, you can go to GitHub on a browser to create a pull request. (Pull requests are a different feature than the Git pull command, which just updates your local repository to match the remote-- instaed, a pull request is how you submit your code branch for review to merge to the main.)

	2. Once that merge is reviewed by the team and approved by the merge master, the merge master then can use git merge to combine your remote branch to the remote main & delete the remote branch.
 	
  	3. You can delete your local copy of the merged branch after the pull request has been approved & the remote branch has been merged using: "git reset --hard origin/main" then "git branch -d feature/my-feature"


(OPTIONAL) # Steps to pulling updates from a remote branch to update your local repository (Use if you updated your remote branch from another computer, or if you want to pull the most recent changes from remote main.)

    A - IF YOU DO NOT HAVE LOCAL CHANGES YOU WANT TO SAVE:
            
            1. Type "git fetch origin" to download changes
            
            2. Type "git reset --hard origin/your-branch-name" to re-clone the remote branch locally
            
    B - IF YOU HAVE LOCAL CHANGES YOU WANT TO MERGE WITH YOUR REMOTE PULL:
        
            1. Type "git fetch origin" to download changes
             
            2. Type "git pull origin your-branch-name" to download changes & resolve merge conflicts manually.
            (You will have to go in file by file and choose which changes to keep.)
			

(OPTIONAL) # Steps to downloading a pre-existing remote branch (use if you work on your code from a new machine or want to test out others' code)

	1. Type "git fetch" to make sure your local repository is updated to recognize all new branches

	2. Type "git branch -a" to list ALL branches (both local (shown in green) and remote (red))

	3. Type "git checkout origin/feature/remote-branch-name" to create & track a copy of that branch on your local machine

	4. You can now edit and play around with that code locally, and your changes won't be updated unless you commit & push.